package com.javainuse.classes;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.Collections;

@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode
@Entity
@Table(name = "user")
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name="userID")
    private Integer userID;
    private String name;
    @Column(name="username")
    private String userName;
    @Column(name="password")
    private String password;
    @Column(name="email")
    private String email = "user@example.com";
    @Column(name="bio")
    private String bio;
    @Column(name="favBand")
    private String favBand;
    @Column(name="favSong")
    private String favSong;
    @Enumerated(EnumType.STRING)
    private UserAuthorities userAuthorities;
    private Boolean locked;
    private Boolean enabled;
    //steven

    //A constructor that takes in all fields besides ID, which is autogenerated. We can add more constructors
    //based on what we need from the registration method
    public User(String name, String userName, String password, String email, String bio, String favBand,
                String favSong, UserAuthorities userAuthorities, Boolean locked, Boolean enabled) {
        this.name = name;
        this.userName = userName;
        this.password = password;
        this.email = email;
        this.bio = bio;
        this.favBand = favBand;
        this.favSong = favSong;
        this.userAuthorities = userAuthorities;
        this.locked = locked;
        this.enabled = enabled;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority = new SimpleGrantedAuthority(userAuthorities.name());
        return Collections.singletonList(authority);
    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public String getUsername() {
        return this.userName;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

}
